// Code generated from parser/Vlang.g4 by ANTLR 4.13.2. DO NOT EDIT.

package compiler

import (
	"fmt"
	"github.com/antlr4-go/antlr/v4"
	"sync"
	"unicode"
)

// Suppress unused import error
var _ = fmt.Printf
var _ = sync.Once{}
var _ = unicode.IsLetter

type VlangLexer struct {
	*antlr.BaseLexer
	channelNames []string
	modeNames    []string
	// TODO: EOF string
}

var VlangLexerLexerStaticData struct {
	once                   sync.Once
	serializedATN          []int32
	ChannelNames           []string
	ModeNames              []string
	LiteralNames           []string
	SymbolicNames          []string
	RuleNames              []string
	PredictionContextCache *antlr.PredictionContextCache
	atn                    *antlr.ATN
	decisionToDFA          []*antlr.DFA
}

func vlanglexerLexerInit() {
	staticData := &VlangLexerLexerStaticData
	staticData.ChannelNames = []string{
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	}
	staticData.ModeNames = []string{
		"DEFAULT_MODE",
	}
	staticData.LiteralNames = []string{
		"", "'fn'", "'main'", "'mut'", "'case'", "'default'", "'struct'", "'while'",
		"", "", "'Atoi'", "'parseFloat'", "'len'", "'cap'", "'append'", "'if'",
		"'else'", "'for'", "'switch'", "'indexOf'", "'join'", "'break'", "'continue'",
		"'return'", "", "", "", "", "", "'int'", "'float64'", "'string'", "'bool'",
		"'rune'", "'print'", "", "'++'", "'--'", "'+='", "'-='", "'+'", "'-'",
		"'*'", "'/'", "'%'", "'!'", "'||'", "'&&'", "'=='", "'!='", "'<='",
		"'>='", "'<'", "'>'", "'='", "'('", "')'", "'['", "']'", "'{'", "'}'",
		"';'", "':'", "'.'", "','",
	}
	staticData.SymbolicNames = []string{
		"", "", "", "", "", "", "", "", "TIPO", "CASTEOS", "ATOI", "PARSEFLOAT",
		"LEN", "CAP", "APPEND", "IF", "ELSE", "FOR", "SWITCH", "INDEXOF", "JOIN",
		"BREAK", "CONTINUE", "RETURN", "BOOLEANO", "ENTERO", "DECIMAL", "CADENA",
		"CARACTER", "TIPO_ENTERO", "TIPO_DECIMAL", "TIPO_CADENA", "TIPO_BOOLEANO",
		"TIPO_CHAR", "PRINT", "ID", "INC", "DEC", "SUMAIMPLICITA", "RESTOIMPLICITO",
		"PLUS", "MINUS", "MUL", "DIV", "MOD", "NOT", "OR", "AND", "EQ", "NEQ",
		"LE", "GE", "LT", "GT", "ASSIGN", "LPAREN", "RPAREN", "LBRACK", "RBRACK",
		"LBRACE", "RBRACE", "SEMICOLON", "COLON", "DOT", "COMMA", "WS", "LINE_COMMENT",
		"BLOCK_COMMENT",
	}
	staticData.RuleNames = []string{
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "TIPO", "CASTEOS",
		"ATOI", "PARSEFLOAT", "LEN", "CAP", "APPEND", "IF", "ELSE", "FOR", "SWITCH",
		"INDEXOF", "JOIN", "BREAK", "CONTINUE", "RETURN", "BOOLEANO", "ENTERO",
		"DECIMAL", "CADENA", "CARACTER", "TIPO_ENTERO", "TIPO_DECIMAL", "TIPO_CADENA",
		"TIPO_BOOLEANO", "TIPO_CHAR", "PRINT", "ID", "INC", "DEC", "SUMAIMPLICITA",
		"RESTOIMPLICITO", "PLUS", "MINUS", "MUL", "DIV", "MOD", "NOT", "OR",
		"AND", "EQ", "NEQ", "LE", "GE", "LT", "GT", "ASSIGN", "LPAREN", "RPAREN",
		"LBRACK", "RBRACK", "LBRACE", "RBRACE", "SEMICOLON", "COLON", "DOT",
		"COMMA", "WS", "LINE_COMMENT", "BLOCK_COMMENT",
	}
	staticData.PredictionContextCache = antlr.NewPredictionContextCache()
	staticData.serializedATN = []int32{
		4, 0, 67, 453, 6, -1, 2, 0, 7, 0, 2, 1, 7, 1, 2, 2, 7, 2, 2, 3, 7, 3, 2,
		4, 7, 4, 2, 5, 7, 5, 2, 6, 7, 6, 2, 7, 7, 7, 2, 8, 7, 8, 2, 9, 7, 9, 2,
		10, 7, 10, 2, 11, 7, 11, 2, 12, 7, 12, 2, 13, 7, 13, 2, 14, 7, 14, 2, 15,
		7, 15, 2, 16, 7, 16, 2, 17, 7, 17, 2, 18, 7, 18, 2, 19, 7, 19, 2, 20, 7,
		20, 2, 21, 7, 21, 2, 22, 7, 22, 2, 23, 7, 23, 2, 24, 7, 24, 2, 25, 7, 25,
		2, 26, 7, 26, 2, 27, 7, 27, 2, 28, 7, 28, 2, 29, 7, 29, 2, 30, 7, 30, 2,
		31, 7, 31, 2, 32, 7, 32, 2, 33, 7, 33, 2, 34, 7, 34, 2, 35, 7, 35, 2, 36,
		7, 36, 2, 37, 7, 37, 2, 38, 7, 38, 2, 39, 7, 39, 2, 40, 7, 40, 2, 41, 7,
		41, 2, 42, 7, 42, 2, 43, 7, 43, 2, 44, 7, 44, 2, 45, 7, 45, 2, 46, 7, 46,
		2, 47, 7, 47, 2, 48, 7, 48, 2, 49, 7, 49, 2, 50, 7, 50, 2, 51, 7, 51, 2,
		52, 7, 52, 2, 53, 7, 53, 2, 54, 7, 54, 2, 55, 7, 55, 2, 56, 7, 56, 2, 57,
		7, 57, 2, 58, 7, 58, 2, 59, 7, 59, 2, 60, 7, 60, 2, 61, 7, 61, 2, 62, 7,
		62, 2, 63, 7, 63, 2, 64, 7, 64, 2, 65, 7, 65, 2, 66, 7, 66, 1, 0, 1, 0,
		1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 3, 1, 3,
		1, 3, 1, 3, 1, 3, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 5,
		1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6,
		1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 3, 7, 179, 8, 7, 1, 8, 1, 8, 3, 8, 183, 8,
		8, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1,
		10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 11, 1, 11, 1, 11, 1, 11, 1, 12,
		1, 12, 1, 12, 1, 12, 1, 13, 1, 13, 1, 13, 1, 13, 1, 13, 1, 13, 1, 13, 1,
		14, 1, 14, 1, 14, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 1, 16, 1, 16, 1, 16,
		1, 16, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 18, 1, 18, 1,
		18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 19, 1, 19, 1, 19, 1, 19, 1, 19,
		1, 20, 1, 20, 1, 20, 1, 20, 1, 20, 1, 20, 1, 21, 1, 21, 1, 21, 1, 21, 1,
		21, 1, 21, 1, 21, 1, 21, 1, 21, 1, 22, 1, 22, 1, 22, 1, 22, 1, 22, 1, 22,
		1, 22, 1, 23, 1, 23, 1, 23, 1, 23, 1, 23, 1, 23, 1, 23, 1, 23, 1, 23, 3,
		23, 279, 8, 23, 1, 24, 4, 24, 282, 8, 24, 11, 24, 12, 24, 283, 1, 25, 4,
		25, 287, 8, 25, 11, 25, 12, 25, 288, 1, 25, 1, 25, 4, 25, 293, 8, 25, 11,
		25, 12, 25, 294, 1, 26, 1, 26, 1, 26, 1, 26, 5, 26, 301, 8, 26, 10, 26,
		12, 26, 304, 9, 26, 1, 26, 1, 26, 1, 27, 1, 27, 1, 27, 1, 27, 1, 28, 1,
		28, 1, 28, 1, 28, 1, 29, 1, 29, 1, 29, 1, 29, 1, 29, 1, 29, 1, 29, 1, 29,
		1, 30, 1, 30, 1, 30, 1, 30, 1, 30, 1, 30, 1, 30, 1, 31, 1, 31, 1, 31, 1,
		31, 1, 31, 1, 32, 1, 32, 1, 32, 1, 32, 1, 32, 1, 33, 1, 33, 1, 33, 1, 33,
		1, 33, 1, 33, 1, 34, 1, 34, 5, 34, 349, 8, 34, 10, 34, 12, 34, 352, 9,
		34, 1, 35, 1, 35, 1, 35, 1, 36, 1, 36, 1, 36, 1, 37, 1, 37, 1, 37, 1, 38,
		1, 38, 1, 38, 1, 39, 1, 39, 1, 40, 1, 40, 1, 41, 1, 41, 1, 42, 1, 42, 1,
		43, 1, 43, 1, 44, 1, 44, 1, 45, 1, 45, 1, 45, 1, 46, 1, 46, 1, 46, 1, 47,
		1, 47, 1, 47, 1, 48, 1, 48, 1, 48, 1, 49, 1, 49, 1, 49, 1, 50, 1, 50, 1,
		50, 1, 51, 1, 51, 1, 52, 1, 52, 1, 53, 1, 53, 1, 54, 1, 54, 1, 55, 1, 55,
		1, 56, 1, 56, 1, 57, 1, 57, 1, 58, 1, 58, 1, 59, 1, 59, 1, 60, 1, 60, 1,
		61, 1, 61, 1, 62, 1, 62, 1, 63, 1, 63, 1, 64, 4, 64, 423, 8, 64, 11, 64,
		12, 64, 424, 1, 64, 1, 64, 1, 65, 1, 65, 1, 65, 1, 65, 5, 65, 433, 8, 65,
		10, 65, 12, 65, 436, 9, 65, 1, 65, 1, 65, 1, 66, 1, 66, 1, 66, 1, 66, 5,
		66, 444, 8, 66, 10, 66, 12, 66, 447, 9, 66, 1, 66, 1, 66, 1, 66, 1, 66,
		1, 66, 1, 445, 0, 67, 1, 1, 3, 2, 5, 3, 7, 4, 9, 5, 11, 6, 13, 7, 15, 8,
		17, 9, 19, 10, 21, 11, 23, 12, 25, 13, 27, 14, 29, 15, 31, 16, 33, 17,
		35, 18, 37, 19, 39, 20, 41, 21, 43, 22, 45, 23, 47, 24, 49, 25, 51, 26,
		53, 27, 55, 28, 57, 29, 59, 30, 61, 31, 63, 32, 65, 33, 67, 34, 69, 35,
		71, 36, 73, 37, 75, 38, 77, 39, 79, 40, 81, 41, 83, 42, 85, 43, 87, 44,
		89, 45, 91, 46, 93, 47, 95, 48, 97, 49, 99, 50, 101, 51, 103, 52, 105,
		53, 107, 54, 109, 55, 111, 56, 113, 57, 115, 58, 117, 59, 119, 60, 121,
		61, 123, 62, 125, 63, 127, 64, 129, 65, 131, 66, 133, 67, 1, 0, 6, 1, 0,
		48, 57, 2, 0, 34, 34, 92, 92, 3, 0, 65, 90, 95, 95, 97, 122, 4, 0, 48,
		57, 65, 90, 95, 95, 97, 122, 3, 0, 9, 10, 13, 13, 32, 32, 2, 0, 10, 10,
		13, 13, 467, 0, 1, 1, 0, 0, 0, 0, 3, 1, 0, 0, 0, 0, 5, 1, 0, 0, 0, 0, 7,
		1, 0, 0, 0, 0, 9, 1, 0, 0, 0, 0, 11, 1, 0, 0, 0, 0, 13, 1, 0, 0, 0, 0,
		15, 1, 0, 0, 0, 0, 17, 1, 0, 0, 0, 0, 19, 1, 0, 0, 0, 0, 21, 1, 0, 0, 0,
		0, 23, 1, 0, 0, 0, 0, 25, 1, 0, 0, 0, 0, 27, 1, 0, 0, 0, 0, 29, 1, 0, 0,
		0, 0, 31, 1, 0, 0, 0, 0, 33, 1, 0, 0, 0, 0, 35, 1, 0, 0, 0, 0, 37, 1, 0,
		0, 0, 0, 39, 1, 0, 0, 0, 0, 41, 1, 0, 0, 0, 0, 43, 1, 0, 0, 0, 0, 45, 1,
		0, 0, 0, 0, 47, 1, 0, 0, 0, 0, 49, 1, 0, 0, 0, 0, 51, 1, 0, 0, 0, 0, 53,
		1, 0, 0, 0, 0, 55, 1, 0, 0, 0, 0, 57, 1, 0, 0, 0, 0, 59, 1, 0, 0, 0, 0,
		61, 1, 0, 0, 0, 0, 63, 1, 0, 0, 0, 0, 65, 1, 0, 0, 0, 0, 67, 1, 0, 0, 0,
		0, 69, 1, 0, 0, 0, 0, 71, 1, 0, 0, 0, 0, 73, 1, 0, 0, 0, 0, 75, 1, 0, 0,
		0, 0, 77, 1, 0, 0, 0, 0, 79, 1, 0, 0, 0, 0, 81, 1, 0, 0, 0, 0, 83, 1, 0,
		0, 0, 0, 85, 1, 0, 0, 0, 0, 87, 1, 0, 0, 0, 0, 89, 1, 0, 0, 0, 0, 91, 1,
		0, 0, 0, 0, 93, 1, 0, 0, 0, 0, 95, 1, 0, 0, 0, 0, 97, 1, 0, 0, 0, 0, 99,
		1, 0, 0, 0, 0, 101, 1, 0, 0, 0, 0, 103, 1, 0, 0, 0, 0, 105, 1, 0, 0, 0,
		0, 107, 1, 0, 0, 0, 0, 109, 1, 0, 0, 0, 0, 111, 1, 0, 0, 0, 0, 113, 1,
		0, 0, 0, 0, 115, 1, 0, 0, 0, 0, 117, 1, 0, 0, 0, 0, 119, 1, 0, 0, 0, 0,
		121, 1, 0, 0, 0, 0, 123, 1, 0, 0, 0, 0, 125, 1, 0, 0, 0, 0, 127, 1, 0,
		0, 0, 0, 129, 1, 0, 0, 0, 0, 131, 1, 0, 0, 0, 0, 133, 1, 0, 0, 0, 1, 135,
		1, 0, 0, 0, 3, 138, 1, 0, 0, 0, 5, 143, 1, 0, 0, 0, 7, 147, 1, 0, 0, 0,
		9, 152, 1, 0, 0, 0, 11, 160, 1, 0, 0, 0, 13, 167, 1, 0, 0, 0, 15, 178,
		1, 0, 0, 0, 17, 182, 1, 0, 0, 0, 19, 184, 1, 0, 0, 0, 21, 189, 1, 0, 0,
		0, 23, 200, 1, 0, 0, 0, 25, 204, 1, 0, 0, 0, 27, 208, 1, 0, 0, 0, 29, 215,
		1, 0, 0, 0, 31, 218, 1, 0, 0, 0, 33, 223, 1, 0, 0, 0, 35, 227, 1, 0, 0,
		0, 37, 234, 1, 0, 0, 0, 39, 242, 1, 0, 0, 0, 41, 247, 1, 0, 0, 0, 43, 253,
		1, 0, 0, 0, 45, 262, 1, 0, 0, 0, 47, 278, 1, 0, 0, 0, 49, 281, 1, 0, 0,
		0, 51, 286, 1, 0, 0, 0, 53, 296, 1, 0, 0, 0, 55, 307, 1, 0, 0, 0, 57, 311,
		1, 0, 0, 0, 59, 315, 1, 0, 0, 0, 61, 323, 1, 0, 0, 0, 63, 330, 1, 0, 0,
		0, 65, 335, 1, 0, 0, 0, 67, 340, 1, 0, 0, 0, 69, 346, 1, 0, 0, 0, 71, 353,
		1, 0, 0, 0, 73, 356, 1, 0, 0, 0, 75, 359, 1, 0, 0, 0, 77, 362, 1, 0, 0,
		0, 79, 365, 1, 0, 0, 0, 81, 367, 1, 0, 0, 0, 83, 369, 1, 0, 0, 0, 85, 371,
		1, 0, 0, 0, 87, 373, 1, 0, 0, 0, 89, 375, 1, 0, 0, 0, 91, 377, 1, 0, 0,
		0, 93, 380, 1, 0, 0, 0, 95, 383, 1, 0, 0, 0, 97, 386, 1, 0, 0, 0, 99, 389,
		1, 0, 0, 0, 101, 392, 1, 0, 0, 0, 103, 395, 1, 0, 0, 0, 105, 397, 1, 0,
		0, 0, 107, 399, 1, 0, 0, 0, 109, 401, 1, 0, 0, 0, 111, 403, 1, 0, 0, 0,
		113, 405, 1, 0, 0, 0, 115, 407, 1, 0, 0, 0, 117, 409, 1, 0, 0, 0, 119,
		411, 1, 0, 0, 0, 121, 413, 1, 0, 0, 0, 123, 415, 1, 0, 0, 0, 125, 417,
		1, 0, 0, 0, 127, 419, 1, 0, 0, 0, 129, 422, 1, 0, 0, 0, 131, 428, 1, 0,
		0, 0, 133, 439, 1, 0, 0, 0, 135, 136, 5, 102, 0, 0, 136, 137, 5, 110, 0,
		0, 137, 2, 1, 0, 0, 0, 138, 139, 5, 109, 0, 0, 139, 140, 5, 97, 0, 0, 140,
		141, 5, 105, 0, 0, 141, 142, 5, 110, 0, 0, 142, 4, 1, 0, 0, 0, 143, 144,
		5, 109, 0, 0, 144, 145, 5, 117, 0, 0, 145, 146, 5, 116, 0, 0, 146, 6, 1,
		0, 0, 0, 147, 148, 5, 99, 0, 0, 148, 149, 5, 97, 0, 0, 149, 150, 5, 115,
		0, 0, 150, 151, 5, 101, 0, 0, 151, 8, 1, 0, 0, 0, 152, 153, 5, 100, 0,
		0, 153, 154, 5, 101, 0, 0, 154, 155, 5, 102, 0, 0, 155, 156, 5, 97, 0,
		0, 156, 157, 5, 117, 0, 0, 157, 158, 5, 108, 0, 0, 158, 159, 5, 116, 0,
		0, 159, 10, 1, 0, 0, 0, 160, 161, 5, 115, 0, 0, 161, 162, 5, 116, 0, 0,
		162, 163, 5, 114, 0, 0, 163, 164, 5, 117, 0, 0, 164, 165, 5, 99, 0, 0,
		165, 166, 5, 116, 0, 0, 166, 12, 1, 0, 0, 0, 167, 168, 5, 119, 0, 0, 168,
		169, 5, 104, 0, 0, 169, 170, 5, 105, 0, 0, 170, 171, 5, 108, 0, 0, 171,
		172, 5, 101, 0, 0, 172, 14, 1, 0, 0, 0, 173, 179, 3, 57, 28, 0, 174, 179,
		3, 59, 29, 0, 175, 179, 3, 61, 30, 0, 176, 179, 3, 63, 31, 0, 177, 179,
		3, 65, 32, 0, 178, 173, 1, 0, 0, 0, 178, 174, 1, 0, 0, 0, 178, 175, 1,
		0, 0, 0, 178, 176, 1, 0, 0, 0, 178, 177, 1, 0, 0, 0, 179, 16, 1, 0, 0,
		0, 180, 183, 3, 19, 9, 0, 181, 183, 3, 21, 10, 0, 182, 180, 1, 0, 0, 0,
		182, 181, 1, 0, 0, 0, 183, 18, 1, 0, 0, 0, 184, 185, 5, 65, 0, 0, 185,
		186, 5, 116, 0, 0, 186, 187, 5, 111, 0, 0, 187, 188, 5, 105, 0, 0, 188,
		20, 1, 0, 0, 0, 189, 190, 5, 112, 0, 0, 190, 191, 5, 97, 0, 0, 191, 192,
		5, 114, 0, 0, 192, 193, 5, 115, 0, 0, 193, 194, 5, 101, 0, 0, 194, 195,
		5, 70, 0, 0, 195, 196, 5, 108, 0, 0, 196, 197, 5, 111, 0, 0, 197, 198,
		5, 97, 0, 0, 198, 199, 5, 116, 0, 0, 199, 22, 1, 0, 0, 0, 200, 201, 5,
		108, 0, 0, 201, 202, 5, 101, 0, 0, 202, 203, 5, 110, 0, 0, 203, 24, 1,
		0, 0, 0, 204, 205, 5, 99, 0, 0, 205, 206, 5, 97, 0, 0, 206, 207, 5, 112,
		0, 0, 207, 26, 1, 0, 0, 0, 208, 209, 5, 97, 0, 0, 209, 210, 5, 112, 0,
		0, 210, 211, 5, 112, 0, 0, 211, 212, 5, 101, 0, 0, 212, 213, 5, 110, 0,
		0, 213, 214, 5, 100, 0, 0, 214, 28, 1, 0, 0, 0, 215, 216, 5, 105, 0, 0,
		216, 217, 5, 102, 0, 0, 217, 30, 1, 0, 0, 0, 218, 219, 5, 101, 0, 0, 219,
		220, 5, 108, 0, 0, 220, 221, 5, 115, 0, 0, 221, 222, 5, 101, 0, 0, 222,
		32, 1, 0, 0, 0, 223, 224, 5, 102, 0, 0, 224, 225, 5, 111, 0, 0, 225, 226,
		5, 114, 0, 0, 226, 34, 1, 0, 0, 0, 227, 228, 5, 115, 0, 0, 228, 229, 5,
		119, 0, 0, 229, 230, 5, 105, 0, 0, 230, 231, 5, 116, 0, 0, 231, 232, 5,
		99, 0, 0, 232, 233, 5, 104, 0, 0, 233, 36, 1, 0, 0, 0, 234, 235, 5, 105,
		0, 0, 235, 236, 5, 110, 0, 0, 236, 237, 5, 100, 0, 0, 237, 238, 5, 101,
		0, 0, 238, 239, 5, 120, 0, 0, 239, 240, 5, 79, 0, 0, 240, 241, 5, 102,
		0, 0, 241, 38, 1, 0, 0, 0, 242, 243, 5, 106, 0, 0, 243, 244, 5, 111, 0,
		0, 244, 245, 5, 105, 0, 0, 245, 246, 5, 110, 0, 0, 246, 40, 1, 0, 0, 0,
		247, 248, 5, 98, 0, 0, 248, 249, 5, 114, 0, 0, 249, 250, 5, 101, 0, 0,
		250, 251, 5, 97, 0, 0, 251, 252, 5, 107, 0, 0, 252, 42, 1, 0, 0, 0, 253,
		254, 5, 99, 0, 0, 254, 255, 5, 111, 0, 0, 255, 256, 5, 110, 0, 0, 256,
		257, 5, 116, 0, 0, 257, 258, 5, 105, 0, 0, 258, 259, 5, 110, 0, 0, 259,
		260, 5, 117, 0, 0, 260, 261, 5, 101, 0, 0, 261, 44, 1, 0, 0, 0, 262, 263,
		5, 114, 0, 0, 263, 264, 5, 101, 0, 0, 264, 265, 5, 116, 0, 0, 265, 266,
		5, 117, 0, 0, 266, 267, 5, 114, 0, 0, 267, 268, 5, 110, 0, 0, 268, 46,
		1, 0, 0, 0, 269, 270, 5, 116, 0, 0, 270, 271, 5, 114, 0, 0, 271, 272, 5,
		117, 0, 0, 272, 279, 5, 101, 0, 0, 273, 274, 5, 102, 0, 0, 274, 275, 5,
		97, 0, 0, 275, 276, 5, 108, 0, 0, 276, 277, 5, 115, 0, 0, 277, 279, 5,
		101, 0, 0, 278, 269, 1, 0, 0, 0, 278, 273, 1, 0, 0, 0, 279, 48, 1, 0, 0,
		0, 280, 282, 7, 0, 0, 0, 281, 280, 1, 0, 0, 0, 282, 283, 1, 0, 0, 0, 283,
		281, 1, 0, 0, 0, 283, 284, 1, 0, 0, 0, 284, 50, 1, 0, 0, 0, 285, 287, 7,
		0, 0, 0, 286, 285, 1, 0, 0, 0, 287, 288, 1, 0, 0, 0, 288, 286, 1, 0, 0,
		0, 288, 289, 1, 0, 0, 0, 289, 290, 1, 0, 0, 0, 290, 292, 5, 46, 0, 0, 291,
		293, 7, 0, 0, 0, 292, 291, 1, 0, 0, 0, 293, 294, 1, 0, 0, 0, 294, 292,
		1, 0, 0, 0, 294, 295, 1, 0, 0, 0, 295, 52, 1, 0, 0, 0, 296, 302, 5, 34,
		0, 0, 297, 301, 8, 1, 0, 0, 298, 299, 5, 92, 0, 0, 299, 301, 9, 0, 0, 0,
		300, 297, 1, 0, 0, 0, 300, 298, 1, 0, 0, 0, 301, 304, 1, 0, 0, 0, 302,
		300, 1, 0, 0, 0, 302, 303, 1, 0, 0, 0, 303, 305, 1, 0, 0, 0, 304, 302,
		1, 0, 0, 0, 305, 306, 5, 34, 0, 0, 306, 54, 1, 0, 0, 0, 307, 308, 5, 39,
		0, 0, 308, 309, 9, 0, 0, 0, 309, 310, 5, 39, 0, 0, 310, 56, 1, 0, 0, 0,
		311, 312, 5, 105, 0, 0, 312, 313, 5, 110, 0, 0, 313, 314, 5, 116, 0, 0,
		314, 58, 1, 0, 0, 0, 315, 316, 5, 102, 0, 0, 316, 317, 5, 108, 0, 0, 317,
		318, 5, 111, 0, 0, 318, 319, 5, 97, 0, 0, 319, 320, 5, 116, 0, 0, 320,
		321, 5, 54, 0, 0, 321, 322, 5, 52, 0, 0, 322, 60, 1, 0, 0, 0, 323, 324,
		5, 115, 0, 0, 324, 325, 5, 116, 0, 0, 325, 326, 5, 114, 0, 0, 326, 327,
		5, 105, 0, 0, 327, 328, 5, 110, 0, 0, 328, 329, 5, 103, 0, 0, 329, 62,
		1, 0, 0, 0, 330, 331, 5, 98, 0, 0, 331, 332, 5, 111, 0, 0, 332, 333, 5,
		111, 0, 0, 333, 334, 5, 108, 0, 0, 334, 64, 1, 0, 0, 0, 335, 336, 5, 114,
		0, 0, 336, 337, 5, 117, 0, 0, 337, 338, 5, 110, 0, 0, 338, 339, 5, 101,
		0, 0, 339, 66, 1, 0, 0, 0, 340, 341, 5, 112, 0, 0, 341, 342, 5, 114, 0,
		0, 342, 343, 5, 105, 0, 0, 343, 344, 5, 110, 0, 0, 344, 345, 5, 116, 0,
		0, 345, 68, 1, 0, 0, 0, 346, 350, 7, 2, 0, 0, 347, 349, 7, 3, 0, 0, 348,
		347, 1, 0, 0, 0, 349, 352, 1, 0, 0, 0, 350, 348, 1, 0, 0, 0, 350, 351,
		1, 0, 0, 0, 351, 70, 1, 0, 0, 0, 352, 350, 1, 0, 0, 0, 353, 354, 5, 43,
		0, 0, 354, 355, 5, 43, 0, 0, 355, 72, 1, 0, 0, 0, 356, 357, 5, 45, 0, 0,
		357, 358, 5, 45, 0, 0, 358, 74, 1, 0, 0, 0, 359, 360, 5, 43, 0, 0, 360,
		361, 5, 61, 0, 0, 361, 76, 1, 0, 0, 0, 362, 363, 5, 45, 0, 0, 363, 364,
		5, 61, 0, 0, 364, 78, 1, 0, 0, 0, 365, 366, 5, 43, 0, 0, 366, 80, 1, 0,
		0, 0, 367, 368, 5, 45, 0, 0, 368, 82, 1, 0, 0, 0, 369, 370, 5, 42, 0, 0,
		370, 84, 1, 0, 0, 0, 371, 372, 5, 47, 0, 0, 372, 86, 1, 0, 0, 0, 373, 374,
		5, 37, 0, 0, 374, 88, 1, 0, 0, 0, 375, 376, 5, 33, 0, 0, 376, 90, 1, 0,
		0, 0, 377, 378, 5, 124, 0, 0, 378, 379, 5, 124, 0, 0, 379, 92, 1, 0, 0,
		0, 380, 381, 5, 38, 0, 0, 381, 382, 5, 38, 0, 0, 382, 94, 1, 0, 0, 0, 383,
		384, 5, 61, 0, 0, 384, 385, 5, 61, 0, 0, 385, 96, 1, 0, 0, 0, 386, 387,
		5, 33, 0, 0, 387, 388, 5, 61, 0, 0, 388, 98, 1, 0, 0, 0, 389, 390, 5, 60,
		0, 0, 390, 391, 5, 61, 0, 0, 391, 100, 1, 0, 0, 0, 392, 393, 5, 62, 0,
		0, 393, 394, 5, 61, 0, 0, 394, 102, 1, 0, 0, 0, 395, 396, 5, 60, 0, 0,
		396, 104, 1, 0, 0, 0, 397, 398, 5, 62, 0, 0, 398, 106, 1, 0, 0, 0, 399,
		400, 5, 61, 0, 0, 400, 108, 1, 0, 0, 0, 401, 402, 5, 40, 0, 0, 402, 110,
		1, 0, 0, 0, 403, 404, 5, 41, 0, 0, 404, 112, 1, 0, 0, 0, 405, 406, 5, 91,
		0, 0, 406, 114, 1, 0, 0, 0, 407, 408, 5, 93, 0, 0, 408, 116, 1, 0, 0, 0,
		409, 410, 5, 123, 0, 0, 410, 118, 1, 0, 0, 0, 411, 412, 5, 125, 0, 0, 412,
		120, 1, 0, 0, 0, 413, 414, 5, 59, 0, 0, 414, 122, 1, 0, 0, 0, 415, 416,
		5, 58, 0, 0, 416, 124, 1, 0, 0, 0, 417, 418, 5, 46, 0, 0, 418, 126, 1,
		0, 0, 0, 419, 420, 5, 44, 0, 0, 420, 128, 1, 0, 0, 0, 421, 423, 7, 4, 0,
		0, 422, 421, 1, 0, 0, 0, 423, 424, 1, 0, 0, 0, 424, 422, 1, 0, 0, 0, 424,
		425, 1, 0, 0, 0, 425, 426, 1, 0, 0, 0, 426, 427, 6, 64, 0, 0, 427, 130,
		1, 0, 0, 0, 428, 429, 5, 47, 0, 0, 429, 430, 5, 47, 0, 0, 430, 434, 1,
		0, 0, 0, 431, 433, 8, 5, 0, 0, 432, 431, 1, 0, 0, 0, 433, 436, 1, 0, 0,
		0, 434, 432, 1, 0, 0, 0, 434, 435, 1, 0, 0, 0, 435, 437, 1, 0, 0, 0, 436,
		434, 1, 0, 0, 0, 437, 438, 6, 65, 0, 0, 438, 132, 1, 0, 0, 0, 439, 440,
		5, 47, 0, 0, 440, 441, 5, 42, 0, 0, 441, 445, 1, 0, 0, 0, 442, 444, 9,
		0, 0, 0, 443, 442, 1, 0, 0, 0, 444, 447, 1, 0, 0, 0, 445, 446, 1, 0, 0,
		0, 445, 443, 1, 0, 0, 0, 446, 448, 1, 0, 0, 0, 447, 445, 1, 0, 0, 0, 448,
		449, 5, 42, 0, 0, 449, 450, 5, 47, 0, 0, 450, 451, 1, 0, 0, 0, 451, 452,
		6, 66, 0, 0, 452, 134, 1, 0, 0, 0, 13, 0, 178, 182, 278, 283, 288, 294,
		300, 302, 350, 424, 434, 445, 1, 6, 0, 0,
	}
	deserializer := antlr.NewATNDeserializer(nil)
	staticData.atn = deserializer.Deserialize(staticData.serializedATN)
	atn := staticData.atn
	staticData.decisionToDFA = make([]*antlr.DFA, len(atn.DecisionToState))
	decisionToDFA := staticData.decisionToDFA
	for index, state := range atn.DecisionToState {
		decisionToDFA[index] = antlr.NewDFA(state, index)
	}
}

// VlangLexerInit initializes any static state used to implement VlangLexer. By default the
// static state used to implement the lexer is lazily initialized during the first call to
// NewVlangLexer(). You can call this function if you wish to initialize the static state ahead
// of time.
func VlangLexerInit() {
	staticData := &VlangLexerLexerStaticData
	staticData.once.Do(vlanglexerLexerInit)
}

// NewVlangLexer produces a new lexer instance for the optional input antlr.CharStream.
func NewVlangLexer(input antlr.CharStream) *VlangLexer {
	VlangLexerInit()
	l := new(VlangLexer)
	l.BaseLexer = antlr.NewBaseLexer(input)
	staticData := &VlangLexerLexerStaticData
	l.Interpreter = antlr.NewLexerATNSimulator(l, staticData.atn, staticData.decisionToDFA, staticData.PredictionContextCache)
	l.channelNames = staticData.ChannelNames
	l.modeNames = staticData.ModeNames
	l.RuleNames = staticData.RuleNames
	l.LiteralNames = staticData.LiteralNames
	l.SymbolicNames = staticData.SymbolicNames
	l.GrammarFileName = "Vlang.g4"
	// TODO: l.EOF = antlr.TokenEOF

	return l
}

// VlangLexer tokens.
const (
	VlangLexerT__0           = 1
	VlangLexerT__1           = 2
	VlangLexerT__2           = 3
	VlangLexerT__3           = 4
	VlangLexerT__4           = 5
	VlangLexerT__5           = 6
	VlangLexerT__6           = 7
	VlangLexerTIPO           = 8
	VlangLexerCASTEOS        = 9
	VlangLexerATOI           = 10
	VlangLexerPARSEFLOAT     = 11
	VlangLexerLEN            = 12
	VlangLexerCAP            = 13
	VlangLexerAPPEND         = 14
	VlangLexerIF             = 15
	VlangLexerELSE           = 16
	VlangLexerFOR            = 17
	VlangLexerSWITCH         = 18
	VlangLexerINDEXOF        = 19
	VlangLexerJOIN           = 20
	VlangLexerBREAK          = 21
	VlangLexerCONTINUE       = 22
	VlangLexerRETURN         = 23
	VlangLexerBOOLEANO       = 24
	VlangLexerENTERO         = 25
	VlangLexerDECIMAL        = 26
	VlangLexerCADENA         = 27
	VlangLexerCARACTER       = 28
	VlangLexerTIPO_ENTERO    = 29
	VlangLexerTIPO_DECIMAL   = 30
	VlangLexerTIPO_CADENA    = 31
	VlangLexerTIPO_BOOLEANO  = 32
	VlangLexerTIPO_CHAR      = 33
	VlangLexerPRINT          = 34
	VlangLexerID             = 35
	VlangLexerINC            = 36
	VlangLexerDEC            = 37
	VlangLexerSUMAIMPLICITA  = 38
	VlangLexerRESTOIMPLICITO = 39
	VlangLexerPLUS           = 40
	VlangLexerMINUS          = 41
	VlangLexerMUL            = 42
	VlangLexerDIV            = 43
	VlangLexerMOD            = 44
	VlangLexerNOT            = 45
	VlangLexerOR             = 46
	VlangLexerAND            = 47
	VlangLexerEQ             = 48
	VlangLexerNEQ            = 49
	VlangLexerLE             = 50
	VlangLexerGE             = 51
	VlangLexerLT             = 52
	VlangLexerGT             = 53
	VlangLexerASSIGN         = 54
	VlangLexerLPAREN         = 55
	VlangLexerRPAREN         = 56
	VlangLexerLBRACK         = 57
	VlangLexerRBRACK         = 58
	VlangLexerLBRACE         = 59
	VlangLexerRBRACE         = 60
	VlangLexerSEMICOLON      = 61
	VlangLexerCOLON          = 62
	VlangLexerDOT            = 63
	VlangLexerCOMMA          = 64
	VlangLexerWS             = 65
	VlangLexerLINE_COMMENT   = 66
	VlangLexerBLOCK_COMMENT  = 67
)
